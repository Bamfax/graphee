[creategraph-command]
maintainer 		= Oliver Kollenberg
shortdesc 		= Create a graph on a Neo4j DB from a splunk dataset. 
description 	= Takes the splunk dataset as input, converts it multiple cypher CREATE or MERGE statements, executes those on Neo4j DB, creating a graph with it. The input needs to be a list of nodes and relationships (not an edgelist). Please see the documentation in this app for more details.
usage 			= public
tags 			= graph neo4j creategraph
category = reporting
syntax = creategraph uri=<string> account=<string> noact=<bool> mode=(create|merge) propsprefix=<string> inputformat=(plain|json) inputfield=<field>

example1 = ... | creategraph uri="neo4j_uri" account="neo4j_account" noact=false mode="merge" propsprefix="p_" inputformat="plain"
comment1 = Create a graph on a Neo4j DB (identified by uri ID 'neo4j_uri' and account 'neo4j_account' in the app config) from the splunk dataset provided. The input dataset format is specific as 'plain', meaning a classic splunk event table where the required fields are present (e.g. node_ref, node_label, rel_ref, rel_type, ...) and property fields are identified with the field name prefix 'p_'.

example2 = .. | creategraph uri="neo4j_uri" account="neo4j_account" noact=false mode="merge" propsprefix="p_" inputformat="json" inputfield="jsonobj"
comment2 = Create a graph on a Neo4j DB (identified by uri ID 'neo4j_uri' and account 'neo4j_account' in the app config) from the splunk dataset provided. The input dataset format is specific as 'json', meaning a single field is read as input from splunk event table. This field is named 'jsonobj', it is in json format and has all required fields compressed in it (e.g. node_ref, node_label, rel_ref, rel_type, ...), where the property fields are identified with the field name prefix 'p_'.

[cypher-command]
maintainer 		= Oliver Kollenberg
shortdesc 		= Runs a user specified cypher command on a Neo4j instance. 
description 	= Runs the cypher command as specified in parameter 'query' and feeds the output of the cypher command as events into a splunk dataset. If the cypher command modifies data in the Neo4j, the option 'mode=write' needs to be given.
usage 			= public
tags 			= cypher
category = generating
syntax = cypher uri=<string> account=<string> noact=<bool> mode=(read|write) query=<string>

example1 = | cypher uri="neo4j_uri" account="neo4j_account" noact=false query="match (n) return ID(n), labels(n), properties(n)"
comment1 = Runs the cyper commands which return all nodes and streams the output (node id, labels and properties) as events into splunk.

[getfullgraph-command]
maintainer 		= Oliver Kollenberg
shortdesc 		= Reads the full graph (nodes and relationships) from your Neo4j instance.
description 	= Reads the full graph (all nodes and relationships) from your Neo4j instance and streams it into appropriate splunk events.
usage 			= public
tags 			= getfullgraph
category = generating
syntax = getfullgraph uri=<string> account=<string> noact=<bool>

example1 = | getfullgraph uri="neo4j_uri" account="neo4j_account" noact=false
comment1 = Reads all nodes and relationships from your Neo4j instance and streams them into appropriate splunk events.