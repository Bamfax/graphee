<dashboard version="1.1">
  <label>Commands</label>
  <row>
    <panel>
      <html>
        <p>This app makes the following custom commands available:</p>
      </html>
    </panel>
  </row>
  <row>
    <html>
      <h2>
        <b>Creategraph</b>
      </h2>
      <p>| creategraph uri=&lt;my_uri_id&gt; account=&lt;my_account_id&gt; noact=&lt;"true"|"false"&gt; mode=&lt;"create"|"merge"&gt; inputformat=&lt;"plain"|"json"&gt; inputfield=&lt;inputfieldname_string&gt;</p>
      <p>Type: Reporting Command</p>
      <p>Use: Creates a graph on the Neo4j instance by transforming the input events, transforming and sending them to the graph db.</p>
      <h3>
        <b>Options:</b>
      </h3>
      <ul>
        <li>
          <b>mode:</b>
        </li>
        <p>Syntax: mode=&lt;"merge"|"create"&gt;</p>
        <p>Description: Cypher command with which the nodes and/or relationsships are being created. Choose between "merge" and "create".</p>
        <p>Default is "merge".</p>
        <li>
          <b>propsprefix:</b>
        </li>
        <p>Syntax: propsprefix=&lt;properties_prefix_string&gt;</p>
        <p>Description: Selector for the properties fields. Choose which fields are taken/read from the inputfield by prepending their names with this prefix. This prefix is then removed from the fieldname in the graph.</p>
        <p>Default is "p_".</p>
        <li>
          <b>inputformat</b>
        </li>
        <p>Syntax: inputformat=&lt;"plain"|"json"&gt;</p>
        <p>Description: Input format can be "plain" which means separate fields or "json" where a single json field is taken which contains the zipped required fields.</p>
        <p>Default is "plain".</p>
        <li>
          <b>inputfield:</b>
        </li>
        <p>Syntax: inputfield=&lt;inputfieldname_string&gt;</p>
        <p>Description: When inputformat="json", specifies the name of the field which contains the json input object. </p>
        <p>Default is "json_obj".</p>
      </ul>
    </html>
    <html>
      <h2>
        <b>Cypher</b>
      </h2>
      <p>| cypher uri=&lt;my_uri_id&gt; account=&lt;my_account_id&gt; noact=&lt;true|false&gt; mode=&lt;read|write&gt; query=&lt;"cypher_querysstring"&gt;</p>
      <p>Type: Generating Command</p>
      <p>Use: Runs a user specified command on the Neo4j instance.</p>
      <h3>
        <b>Options:</b>
      </h3>
      <ul>
        <li>
          <b>mode:</b>
        </li>
        <p>Syntax: mode=&lt;"read"|"write"&gt;</p>
        <p>Description: Mode for the cypher transaction and command, if it intends to make changes. Choose between "read" and "write".</p>
        <p>Default is "read".</p>
        <li>
          <b>query:</b>
        </li>
        <p>Syntax: query=&lt;"cypher_querysstring"&gt;</p>
        <p>Description: Cypher querystring to be executed on the graph db.</p>
      </ul>
    </html>
  </row>
  <row>
    <html>
      <h2>
        <b>Getfullgraph uri=&lt;my_uri_id&gt; account=&lt;my_account_id&gt; noact=&lt;true|false&gt;</b>
      </h2>
      <p>| getfullgraph</p>
      <p>Type: Generating Command</p>
      <p>Use: Pulls all nodes and relationships from the graph db.</p>
      <p>Further info: This command supports multiple labels.</p>
      <h3>
        <b>Options:</b>
      </h3>
      <ul>
        <li>
          <b>none</b>
        </li>
      </ul>
    </html>
    <html>
      <h1>Common options available on all commands</h1>
      <ul>
        <li>
          <b>uri:</b>
        </li>
        <p>Syntax: uri=&lt;URI_ID&gt;</p>
        <p>Description: URI_ID: ID of the Neo4j URI entry as specified in configuration page under "Neo4j URI".</p>
        <li>
          <b>account:</b>
        </li>
        <p>Syntax: account=&lt;Account_ID&gt;</p>
        <p>Description: Account_ID: ID of the Neo4j Account entry as specified in configuration page under "Neo4j Accounts".</p>
        <li>
          <b>noact:</b>
        </li>
        <p>Syntax: noact=&lt;"true"|"false"&gt;</p>
        <p>Description: No action. Easy flag to temporarily disable the custom command. </p>
      </ul>
    </html>
  </row>
  <row>
    <html>
      <h1>A word on creating graphs</h1>
      <ul>
        <li>Please note the difference in meaning between node_ref and node_id. The former is the required field for referencing nodes in the input dataset when creating graphs. It has no other function as uniquely referencing nodes in the building the cypher commands that create the graph. It is not persisted in the graph. The latter is returned by graph queries: It is the ID neo4j assigns to stored nodes and rels.</li>
        <li>Variables like node_ref are fed to Neo4j and need to follow Neo4j conventions. node_ref is a name type in cypher and therefore needs to start with an alphabetic char. See <a href="https://neo4j.com/docs/cypher-manual/current/syntax/naming/" target="_blank">Cypher naming conventions</a> for more info.</li>
        <li>These fields need to be present for creating nodes: obj_type="node", node_ref, node_label. Props are optional.</li>
        <li>These fields need to be present for creating rels: obj_type="rel", rel_ref, rel_type, rel_dst_node [as in node_ref], rel_src_node [as in node_ref]. Props are optional.</li>
        <li>When creating rels the creategraph command needs to know which src/dst nodes are referenced by the rel. The creategraph commands only succeed if the rel_src_node and rel_dst_node could be CREATEd or MERGEd beforehand, allowing the creategraph command to find the id of these two nodes. These node ids are then used internally by the creategraph command to reference these nodes.</li>
        <li>Please be aware that graph objects only allow storing of non-fancy data types. See <a href="https://neo4j.com/docs/cypher-manual/current/syntax/values/" target="_blank">Cypher Values and types</a> for more info.</li>
        <li>Speed of the commands is improved via batching. Even though, huge graphs with >=100.000 nodes may take a while to create. If timeouts occur, change the defaults in commands.conf.</li>
      </ul>
    </html>
  </row>
</dashboard>