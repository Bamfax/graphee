<form script="searchcontrolsevents.js" stylesheet="searchcontrolsevents.css" theme="light" version="1.1">
  <init>
    <set token="show_results">true</set>
    <set token="beforeSearch">true</set>
  </init>
  <label>Challenges and solutions</label>
  <fieldset submitButton="false"></fieldset>
  <row>
    <panel>
      <html>
        <div class="challengedemo01_primer">
          <p>A common challenge is that datasets come as list of neighbor pairs. A firewall logs (as in the demo below) is a typical example of such a graph representation: It describes a connection by giving source, destination and metadata. This triple can also be understood as three respective objects: source, destination and relationship. A graph on the other hand consists of nodes and links. Trying to built a graph from lists of neighbor pairs is suboptimal. The main issue is that neighbor lists introduce redundancies: A unique node will be referenced multiple times and thus have duplicates (e.g. a firewall logs where a single source opens multiple connections) . Keeping those multiple occurences in sync and identical across all SPL transformations in its way to the final graph input is hard and most often not maintainable.</p>
          <p>This can be solved by representing a graph with a flat nodes and rels list. This representation is used as input into the graph creation custom commands of this app.</p>
          <p>But how can a list of neighbor pairs be transformed into a nodes and rels list, using SPL?</p>
          <p>The following describes a possible approach to achieve this. It has two main steps: Creating Json objects and expanding those, giving each its own event:</p>
          <ol>
            <li>Understand the neighbor pair as the three objects which it is made of: source, destination and relationship</li>
            <li>Create a json representation of these objects using |tojson or |eval source=json_object(...). This will ease their future SPL handling. In the case of firewall logs those would be three objects: source, destination and connection.</li>
            <li>These objects are now defined and clearly separated, but they are still on the same line (or event). Expand the lines now using |stats, so that each object comes on its own line/event. </li>
            <li>Following these steps, the original list is successfully transformed into a representation more suitable for graphing. Please see the below demo for details.</li>
          </ol>
          <p>Please note that the demo has emphasis on concept clarity. A specific dataset may warrent adapting and optimizing the SPL for this specific case.</p>
        </div>
      </html>
    </panel>
    <panel depends="$alwaysHideThisPanel$">
      <input type="text" token="searchString">
        <label>$searchString$</label>
      </input>
    </panel>
    <panel depends="$alwaysHideThisPanel$">
      <input type="text" token="searchString2">
        <label>$searchString2$</label>
      </input>
    </panel>
  </row>

  <row>
    <panel>
      <html>
        <div class="challengedemo01_intro_dataset">
          <p>Consider the following firewall log dataset:</p>
        </div>
      </html>
    </panel>
  </row>

  <row>
    <panel>
      <table>
        <search>
          <query>| inputlookup graphee_demo_concepts_firewall_traffic.csv
| head 10
| rex field=dst_ip mode=sed "s/^\d+\.\d+\.\d+./10.10.10./g"
| search NOT dst_ip = 10.10.10.0 NOT src_ip=0.*
| rename dest_port as dst_port
| table src_ip, src_port, dst_ip, dst_port, bytes_received, bytes_sent, packets_received, packets_sent
``` base data above ```</query>
          <earliest>-24h@h</earliest>
          <latest>now</latest>
        </search>
        <option name="drilldown">none</option>
        <option name="refresh.display">progressbar</option>
      </table>
    </panel>
  </row>

  <row>
    <panel depends="$beforeSearch$">
      <html>
        <div class="challengedemo01_createjsonobjs">
          <h1>1. Create json objects</h1>
          <div>
            <p style="margin-bottom:0px;">The following code transforms the dataset into json objects.</p>
          </div>
          <button type="button" id="fwtojson" class="btn btn-primary">fw logs to json obj</button>
        </div>
      </html>
    </panel>
  </row>
  <row>
    <panel>
      <html>
        <div>
            <div class="main-area">
                <div id="mysearchbar1"/>
                <div id="mysearchcontrols1"/>
            </div>
        </div>
      </html>
    </panel>
  </row>
  <row>
    <panel depends="$searchString$">
      <table>
        <title>Search results</title>
        <search base="base">
        </search>
        <option name="drilldown">none</option>
      </table>
    </panel>
  </row>

  <row>
    <panel depends="$searchString$">
      <html>
        <h1>2. Expand the json objects</h1>
        <div>
          <p style="margin-bottom:0px;">Next the json objects are expanded on their own lines. Please note that deduping is omitted here to simplify the demo.</p>
        </div>
        <button type="button" id="fwlogsjsonexpand" class="btn btn-primary">Expand json_obj to dedicated lines</button>
      </html>
    </panel>
  </row>
  <row>
    <panel depends="$searchString$">
      <html>
        <div>
            <div class="main-area">
                <div id="mysearchbar2"/>
                <div id="mysearchcontrols2"/>
            </div>
        </div>
      </html>
    </panel>
  </row>
  <row>
    <panel depends="$searchString2$">
      <table>
        <title>Expanded json objects</title>
        <search base="base2">
        </search>
        <option name="drilldown">none</option>
      </table>
    </panel>
  </row>
  
  <row>
    <panel depends="$searchString2$">
      <html>
        <div class="challengedemo01_disclaimer">
          <h1>Disclaimer</h1>
          <p>The expander used above does not dedup. A better approach would use the node_id and rel_id as expander in the by clause of the |stats command.</p>
        </div>
      </html>
    </panel>
  </row>

  <row>
    <panel depends="$searchString2$">
      <html>
        <div class="challengedemo01_graph">
          <h1>Enjoy</h1>
          <p>Have fun graphing!</p>
          <img src="/static/app/graphee/images/graphee_demo_concepts_firewall_traffic.jpg" />
        </div>
      </html>
    </panel>
  </row>


</form>